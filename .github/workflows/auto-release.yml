name: Automatic Release After Deploy

on:
  workflow_run:
    workflows: ["Deploy"]
    types:
      - completed
    branches:
      - main
      - production
      - release/*
  
  # Allow manual trigger for testing
  workflow_dispatch:
    inputs:
      deployment_environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development
      force_release:
        description: 'Force release creation even if deployment failed'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  issues: write
  pull-requests: read
  actions: read

env:
  NODE_VERSION: '18'
  RELEASE_BRANCH: 'main'

jobs:
  check-deployment:
    name: Check Deployment Status
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      deployment_success: ${{ steps.check.outputs.deployment_success }}
      deployment_environment: ${{ steps.check.outputs.deployment_environment }}
      commit_sha: ${{ steps.check.outputs.commit_sha }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check deployment status
        id: check
        run: |
          # Check if this is a manual trigger
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual trigger detected"
            echo "should_release=${{ inputs.force_release || 'true' }}" >> $GITHUB_OUTPUT
            echo "deployment_success=true" >> $GITHUB_OUTPUT
            echo "deployment_environment=${{ inputs.deployment_environment }}" >> $GITHUB_OUTPUT
            echo "commit_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check workflow run conclusion
          WORKFLOW_CONCLUSION="${{ github.event.workflow_run.conclusion }}"
          WORKFLOW_HEAD_SHA="${{ github.event.workflow_run.head_sha }}"
          WORKFLOW_HEAD_BRANCH="${{ github.event.workflow_run.head_branch }}"
          
          echo "Workflow conclusion: $WORKFLOW_CONCLUSION"
          echo "Head SHA: $WORKFLOW_HEAD_SHA"
          echo "Head branch: $WORKFLOW_HEAD_BRANCH"
          
          # Determine if we should create a release
          if [ "$WORKFLOW_CONCLUSION" = "success" ]; then
            echo "Deployment successful, proceeding with release"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "deployment_success=true" >> $GITHUB_OUTPUT
          else
            echo "Deployment failed or was cancelled, skipping release"
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "deployment_success=false" >> $GITHUB_OUTPUT
          fi
          
          # Determine environment based on branch
          if [[ "$WORKFLOW_HEAD_BRANCH" == "main" || "$WORKFLOW_HEAD_BRANCH" == "production" ]]; then
            echo "deployment_environment=production" >> $GITHUB_OUTPUT
          elif [[ "$WORKFLOW_HEAD_BRANCH" == "staging" ]]; then
            echo "deployment_environment=staging" >> $GITHUB_OUTPUT
          elif [[ "$WORKFLOW_HEAD_BRANCH" == release/* ]]; then
            echo "deployment_environment=release" >> $GITHUB_OUTPUT
          else
            echo "deployment_environment=development" >> $GITHUB_OUTPUT
          fi
          
          echo "commit_sha=$WORKFLOW_HEAD_SHA" >> $GITHUB_OUTPUT

  generate-version:
    name: Generate Release Version
    runs-on: ubuntu-latest
    needs: check-deployment
    if: needs.check-deployment.outputs.should_release == 'true'
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.version.outputs.tag_name }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.check-deployment.outputs.commit_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Generate version
        id: version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Get latest git tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Remove 'v' prefix if present
          LATEST_VERSION=${LATEST_TAG#v}
          
          # Determine version increment based on environment and commits
          ENVIRONMENT="${{ needs.check-deployment.outputs.deployment_environment }}"
          
          # Get commits since last tag
          COMMITS_SINCE_TAG=$(git rev-list ${LATEST_TAG}..HEAD --count 2>/dev/null || echo "1")
          
          # Check for breaking changes in commit messages
          BREAKING_CHANGES=$(git log ${LATEST_TAG}..HEAD --grep="BREAKING CHANGE" --oneline | wc -l)
          
          # Check for features
          FEATURES=$(git log ${LATEST_TAG}..HEAD --grep="feat:" --oneline | wc -l)
          
          # Generate new version based on semantic versioning
          if [ "$BREAKING_CHANGES" -gt 0 ]; then
            # Major version bump for breaking changes
            NEW_VERSION=$(node -e "
              const semver = require('semver');
              console.log(semver.inc('$LATEST_VERSION', 'major'));
            " 2>/dev/null || echo "$(echo $LATEST_VERSION | awk -F. '{print $1+1".0.0"}')")
          elif [ "$FEATURES" -gt 0 ]; then
            # Minor version bump for new features
            NEW_VERSION=$(node -e "
              const semver = require('semver');
              console.log(semver.inc('$LATEST_VERSION', 'minor'));
            " 2>/dev/null || echo "$(echo $LATEST_VERSION | awk -F. '{print $1"."$2+1".0"}')")
          else
            # Patch version bump for bug fixes
            NEW_VERSION=$(node -e "
              const semver = require('semver');
              console.log(semver.inc('$LATEST_VERSION', 'patch'));
            " 2>/dev/null || echo "$(echo $LATEST_VERSION | awk -F. '{print $1"."$2"."$3+1}')")
          fi
          
          # Add pre-release suffix for non-production environments
          if [ "$ENVIRONMENT" != "production" ]; then
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            NEW_VERSION="${NEW_VERSION}-${ENVIRONMENT}.${TIMESTAMP}"
            IS_PRERELEASE="true"
          else
            IS_PRERELEASE="false"
          fi
          
          TAG_NAME="v${NEW_VERSION}"
          
          echo "Generated version: $NEW_VERSION"
          echo "Tag name: $TAG_NAME"
          echo "Is prerelease: $IS_PRERELEASE"
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT

  generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: [check-deployment, generate-version]
    if: needs.check-deployment.outputs.should_release == 'true'
    outputs:
      release_notes: ${{ steps.notes.outputs.release_notes }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.check-deployment.outputs.commit_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release notes
        id: notes
        run: |
          # Get latest tag for comparison
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          COMMIT_SHA="${{ needs.check-deployment.outputs.commit_sha }}"
          ENVIRONMENT="${{ needs.check-deployment.outputs.deployment_environment }}"
          
          # Create release notes
          cat > release_notes.md << 'EOF'
          ## 🚀 Release Notes
          
          **Environment:** $ENVIRONMENT
          **Deployed Commit:** [$COMMIT_SHA](https://github.com/${{ github.repository }}/commit/$COMMIT_SHA)
          **Deployment Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ### 📋 Changes
          
          EOF
          
          if [ -n "$LATEST_TAG" ]; then
            echo "Generating changes since $LATEST_TAG..."
            
            # Features
            FEATURES=$(git log ${LATEST_TAG}..HEAD --grep="feat:" --pretty=format:"- %s" --reverse)
            if [ -n "$FEATURES" ]; then
              echo "#### ✨ New Features" >> release_notes.md
              echo "$FEATURES" >> release_notes.md
              echo "" >> release_notes.md
            fi
            
            # Bug fixes
            FIXES=$(git log ${LATEST_TAG}..HEAD --grep="fix:" --pretty=format:"- %s" --reverse)
            if [ -n "$FIXES" ]; then
              echo "#### 🐛 Bug Fixes" >> release_notes.md
              echo "$FIXES" >> release_notes.md
              echo "" >> release_notes.md
            fi
            
            # Breaking changes
            BREAKING=$(git log ${LATEST_TAG}..HEAD --grep="BREAKING CHANGE" --pretty=format:"- %s" --reverse)
            if [ -n "$BREAKING" ]; then
              echo "#### ⚠️ Breaking Changes" >> release_notes.md
              echo "$BREAKING" >> release_notes.md
              echo "" >> release_notes.md
            fi
            
            # Other changes
            OTHER=$(git log ${LATEST_TAG}..HEAD --grep="chore:\|docs:\|style:\|refactor:\|perf:\|test:" --pretty=format:"- %s" --reverse)
            if [ -n "$OTHER" ]; then
              echo "#### 🔧 Other Changes" >> release_notes.md
              echo "$OTHER" >> release_notes.md
              echo "" >> release_notes.md
            fi
            
            # Contributors
            CONTRIBUTORS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%an" | sort -u | sed 's/^/- @/')
            if [ -n "$CONTRIBUTORS" ]; then
              echo "#### 👥 Contributors" >> release_notes.md
              echo "$CONTRIBUTORS" >> release_notes.md
              echo "" >> release_notes.md
            fi
          else
            echo "#### 🎉 Initial Release" >> release_notes.md
            echo "This is the first automated release of the project." >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          # Add deployment information
          cat >> release_notes.md << 'EOF'
          ### 📦 Deployment Information
          
          - **Status:** ✅ Successfully Deployed
          - **Environment:** $ENVIRONMENT
          - **Workflow:** [View Deployment Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ---
          
          *This release was automatically generated after a successful deployment.*
          EOF
          
          # Replace variables in the template
          sed -i "s/\$ENVIRONMENT/$ENVIRONMENT/g" release_notes.md
          sed -i "s/\$COMMIT_SHA/$COMMIT_SHA/g" release_notes.md
          
          # Output the release notes
          RELEASE_NOTES=$(cat release_notes.md)
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [check-deployment, generate-version, generate-release-notes]
    if: needs.check-deployment.outputs.should_release == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.check-deployment.outputs.commit_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.generate-version.outputs.tag_name }}
          release_name: "Release ${{ needs.generate-version.outputs.tag_name }}"
          body: ${{ needs.generate-release-notes.outputs.release_notes }}
          draft: false
          prerelease: ${{ needs.generate-version.outputs.is_prerelease }}
          commitish: ${{ needs.check-deployment.outputs.commit_sha }}

      - name: Update package.json version
        if: needs.check-deployment.outputs.deployment_environment == 'production'
        run: |
          # Update package.json with new version for production releases
          NEW_VERSION="${{ needs.generate-version.outputs.version }}"
          npm version $NEW_VERSION --no-git-tag-version
          
          # Commit version update
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]" || exit 0
          git push origin HEAD:${{ github.ref_name }} || exit 0

      - name: Notify success
        run: |
          echo "✅ Release ${{ needs.generate-version.outputs.tag_name }} created successfully!"
          echo "🔗 Release URL: ${{ steps.create_release.outputs.html_url }}"
          echo "📦 Environment: ${{ needs.check-deployment.outputs.deployment_environment }}"

  notify-failure:
    name: Notify Release Failure
    runs-on: ubuntu-latest
    needs: [check-deployment, generate-version, generate-release-notes, create-release]
    if: failure() && needs.check-deployment.outputs.should_release == 'true'
    
    steps:
      - name: Notify failure
        run: |
          echo "❌ Automatic release creation failed!"
          echo "🔍 Check the workflow logs for details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "📋 Deployment Environment: ${{ needs.check-deployment.outputs.deployment_environment }}"
          echo "📝 Commit SHA: ${{ needs.check-deployment.outputs.commit_sha }}"

      - name: Create issue for failed release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = `🚨 Automatic Release Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Automatic Release Failure Report
            
            **Workflow Run:** [#${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Environment:** ${{ needs.check-deployment.outputs.deployment_environment }}
            **Commit SHA:** ${{ needs.check-deployment.outputs.commit_sha }}
            **Timestamp:** ${new Date().toISOString()}
            
            ### Action Required
            Please review the workflow logs and manually create the release if needed.
            
            ### Troubleshooting Steps
            1. Check workflow permissions
            2. Verify deployment status
            3. Review commit history for version conflicts
            4. Ensure all required secrets are configured
            
            ---
            *This issue was automatically created by the Auto-Release workflow.*
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'automation', 'release']
            });
